{"ast":null,"code":"var _jsxFileName = \"/home/qiu/code/Github-hotspot/github-viz-app/src/contexts/ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // 从本地存储获取主题，如果没有则使用系统默认主题\n  const getInitialTheme = () => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) return savedTheme;\n\n    // 检测系统主题偏好\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  };\n  const [theme, setTheme] = useState(getInitialTheme);\n\n  // 切换主题\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  // 主题变化时修改文档根元素的样式和本地存储\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // 监听系统主题变化\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (!localStorage.getItem('theme')) {\n        setTheme(mediaQuery.matches ? 'dark' : 'light');\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s2(ThemeProvider, \"o5rFCRk3YRezGGNCZN87x/VFgQo=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","getInitialTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","theme","setTheme","toggleTheme","prevTheme","root","document","documentElement","classList","remove","add","setItem","mediaQuery","handleChange","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/qiu/code/Github-hotspot/github-viz-app/src/contexts/ThemeContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport const ThemeProvider = ({ children }) => {\n    // 从本地存储获取主题，如果没有则使用系统默认主题\n    const getInitialTheme = () => {\n        const savedTheme = localStorage.getItem('theme');\n        if (savedTheme) return savedTheme;\n\n        // 检测系统主题偏好\n        return window.matchMedia('(prefers-color-scheme: dark)').matches\n            ? 'dark'\n            : 'light';\n    };\n\n    const [theme, setTheme] = useState(getInitialTheme);\n\n    // 切换主题\n    const toggleTheme = () => {\n        setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n    };\n\n    // 主题变化时修改文档根元素的样式和本地存储\n    useEffect(() => {\n        const root = window.document.documentElement;\n        root.classList.remove('light', 'dark');\n        root.classList.add(theme);\n        localStorage.setItem('theme', theme);\n    }, [theme]);\n\n    // 监听系统主题变化\n    useEffect(() => {\n        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n        const handleChange = () => {\n            if (!localStorage.getItem('theme')) {\n                setTheme(mediaQuery.matches ? 'dark' : 'light');\n            }\n        };\n\n        mediaQuery.addEventListener('change', handleChange);\n        return () => mediaQuery.removeEventListener('change', handleChange);\n    }, []);\n\n    return (\n        <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};\n\nexport default ThemeProvider; "],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,YAAY,CAAC;AAAA;AAACE,EAAA,CAA1CD,QAAQ;AAErB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3C;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE,OAAOA,UAAU;;IAEjC;IACA,OAAOG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAC1D,MAAM,GACN,OAAO;EACjB,CAAC;EAED,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAACU,eAAe,CAAC;;EAEnD;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACtBD,QAAQ,CAACE,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACnE,CAAC;;EAED;EACAnB,SAAS,CAAC,MAAM;IACZ,MAAMoB,IAAI,GAAGP,MAAM,CAACQ,QAAQ,CAACC,eAAe;IAC5CF,IAAI,CAACG,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IACtCJ,IAAI,CAACG,SAAS,CAACE,GAAG,CAACT,KAAK,CAAC;IACzBL,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEV,KAAK,CAAC;EACxC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACAhB,SAAS,CAAC,MAAM;IACZ,MAAM2B,UAAU,GAAGd,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMc,YAAY,GAAGA,CAAA,KAAM;MACvB,IAAI,CAACjB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;QAChCK,QAAQ,CAACU,UAAU,CAACZ,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;MACnD;IACJ,CAAC;IAEDY,UAAU,CAACE,gBAAgB,CAAC,QAAQ,EAAED,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACG,mBAAmB,CAAC,QAAQ,EAAEF,YAAY,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI1B,OAAA,CAACC,YAAY,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAEhB,KAAK;MAAEC,QAAQ;MAAEC;IAAY,CAAE;IAAAX,QAAA,EAC1DA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;AAAC5B,GAAA,CA7CWF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AA+C1B,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}