{"ast":null,"code":"var _jsxFileName = \"/home/qiu/code/Github-hotspot/github-viz-app/src/contexts/GitHubDataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GitHubDataContext = /*#__PURE__*/createContext();\nexport const useGitHubData = () => {\n  _s();\n  return useContext(GitHubDataContext);\n};\n_s(useGitHubData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const GitHubDataProvider = ({\n  children\n}) => {\n  _s2();\n  const [repositories, setRepositories] = useState([]);\n  const [contributors, setContributors] = useState([]);\n  const [activities, setActivities] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [trendingRepos, setTrendingRepos] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  // 初始化加载所有数据\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  // 获取所有数据\n  const fetchAllData = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      await Promise.all([fetchRepositories(), fetchContributors(), fetchActivities(), fetchLanguages(), fetchTrendingRepos()]);\n      setLastUpdated(new Date().toISOString());\n    } catch (err) {\n      setError(err.message || '获取数据失败');\n      toast.error('获取数据失败，请稍后再试');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 获取所有仓库数据\n  const fetchRepositories = async () => {\n    const response = await axios.get('/api/repositories');\n    setRepositories(response.data);\n    return response.data;\n  };\n\n  // 获取贡献者数据\n  const fetchContributors = async () => {\n    const response = await axios.get('/api/contributors');\n    setContributors(response.data);\n    return response.data;\n  };\n\n  // 获取活动数据\n  const fetchActivities = async () => {\n    const response = await axios.get('/api/activities');\n    setActivities(response.data);\n    return response.data;\n  };\n\n  // 获取语言分布数据\n  const fetchLanguages = async () => {\n    const response = await axios.get('/api/languages');\n    setLanguages(response.data);\n    return response.data;\n  };\n\n  // 获取趋势仓库数据\n  const fetchTrendingRepos = async () => {\n    const response = await axios.get('/api/trending');\n    setTrendingRepos(response.data);\n    return response.data;\n  };\n\n  // 刷新所有数据\n  const refreshData = async () => {\n    setIsLoading(true);\n    await fetchAllData();\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(GitHubDataContext.Provider, {\n    value: {\n      repositories,\n      contributors,\n      activities,\n      languages,\n      trendingRepos,\n      isLoading,\n      error,\n      lastUpdated,\n      refreshData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s2(GitHubDataProvider, \"4inYqmIvJZQBOSBFkgkWqjze5O4=\");\n_c = GitHubDataProvider;\nexport default GitHubDataProvider;\nvar _c;\n$RefreshReg$(_c, \"GitHubDataProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","GitHubDataContext","useGitHubData","_s","GitHubDataProvider","children","_s2","repositories","setRepositories","contributors","setContributors","activities","setActivities","languages","setLanguages","trendingRepos","setTrendingRepos","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","fetchAllData","Promise","all","fetchRepositories","fetchContributors","fetchActivities","fetchLanguages","fetchTrendingRepos","Date","toISOString","err","message","response","get","data","refreshData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/qiu/code/Github-hotspot/github-viz-app/src/contexts/GitHubDataContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\n\nconst GitHubDataContext = createContext();\n\nexport const useGitHubData = () => useContext(GitHubDataContext);\n\nexport const GitHubDataProvider = ({ children }) => {\n    const [repositories, setRepositories] = useState([]);\n    const [contributors, setContributors] = useState([]);\n    const [activities, setActivities] = useState([]);\n    const [languages, setLanguages] = useState([]);\n    const [trendingRepos, setTrendingRepos] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [lastUpdated, setLastUpdated] = useState(null);\n\n    // 初始化加载所有数据\n    useEffect(() => {\n        fetchAllData();\n    }, []);\n\n    // 获取所有数据\n    const fetchAllData = async () => {\n        setIsLoading(true);\n        setError(null);\n\n        try {\n            await Promise.all([\n                fetchRepositories(),\n                fetchContributors(),\n                fetchActivities(),\n                fetchLanguages(),\n                fetchTrendingRepos()\n            ]);\n\n            setLastUpdated(new Date().toISOString());\n        } catch (err) {\n            setError(err.message || '获取数据失败');\n            toast.error('获取数据失败，请稍后再试');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // 获取所有仓库数据\n    const fetchRepositories = async () => {\n        const response = await axios.get('/api/repositories');\n        setRepositories(response.data);\n        return response.data;\n    };\n\n    // 获取贡献者数据\n    const fetchContributors = async () => {\n        const response = await axios.get('/api/contributors');\n        setContributors(response.data);\n        return response.data;\n    };\n\n    // 获取活动数据\n    const fetchActivities = async () => {\n        const response = await axios.get('/api/activities');\n        setActivities(response.data);\n        return response.data;\n    };\n\n    // 获取语言分布数据\n    const fetchLanguages = async () => {\n        const response = await axios.get('/api/languages');\n        setLanguages(response.data);\n        return response.data;\n    };\n\n    // 获取趋势仓库数据\n    const fetchTrendingRepos = async () => {\n        const response = await axios.get('/api/trending');\n        setTrendingRepos(response.data);\n        return response.data;\n    };\n\n    // 刷新所有数据\n    const refreshData = async () => {\n        setIsLoading(true);\n        await fetchAllData();\n        setIsLoading(false);\n    };\n\n    return (\n        <GitHubDataContext.Provider\n            value={{\n                repositories,\n                contributors,\n                activities,\n                languages,\n                trendingRepos,\n                isLoading,\n                error,\n                lastUpdated,\n                refreshData,\n            }}\n        >\n            {children}\n        </GitHubDataContext.Provider>\n    );\n};\n\nexport default GitHubDataProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}